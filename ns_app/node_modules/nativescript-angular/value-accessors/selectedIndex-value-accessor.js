Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var base_value_accessor_1 = require("./base-value-accessor");
var SELECTED_INDEX_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return SelectedIndexValueAccessor; }),
    multi: true,
};
/**
 * The accessor for setting a selectedIndex and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <SegmentedBar [(ngModel)]="model.test">
 *  ```
 */
var SelectedIndexValueAccessor = (function (_super) {
    __extends(SelectedIndexValueAccessor, _super);
    function SelectedIndexValueAccessor(elementRef) {
        return _super.call(this, elementRef.nativeElement) || this;
    }
    SelectedIndexValueAccessor.prototype.writeValue = function (value) {
        this.value = value;
        if (this.viewInitialized) {
            this.view.selectedIndex = this.value;
        }
    };
    SelectedIndexValueAccessor.prototype.ngAfterViewInit = function () {
        this.viewInitialized = true;
        this.view.selectedIndex = this.value;
    };
    return SelectedIndexValueAccessor;
}(base_value_accessor_1.BaseValueAccessor));
SelectedIndexValueAccessor = __decorate([
    core_1.Directive({
        selector: "SegmentedBar[ngModel],SegmentedBar[formControlName]," +
            "segmentedBar[ngModel],segmentedBar[formControlName]," +
            "segmentedbar[ngModel],segmentedbar[formControlName]," +
            "segmented-bar[ngModel],segmented-bar[formControlName]," +
            "ListPicker[ngModel],ListPicker[formControlName]," +
            "listPicker[ngModel],listPicker[formControlName]," +
            "listpicker[ngModel],listpicker[formControlName]," +
            "list-picker[ngModel],list-picker[formControlName]," +
            "TabView[ngModel],TabView[formControlName]," +
            "tabView[ngModel],tabView[formControlName]," +
            "tabview[ngModel],tabview[formControlName]," +
            "tab-view[ngModel],tab-view[formControlName]",
        providers: [SELECTED_INDEX_VALUE_ACCESSOR],
        host: {
            "(touch)": "onTouched()",
            "(selectedIndexChange)": "onChange($event.value)",
        },
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], SelectedIndexValueAccessor);
exports.SelectedIndexValueAccessor = SelectedIndexValueAccessor;
//# sourceMappingURL=selectedIndex-value-accessor.js.map